// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: pricing_service.proto

package byhiras_pricing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PricingServiceClient is the client API for PricingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PricingServiceClient interface {
	Patch(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error)
}

type pricingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPricingServiceClient(cc grpc.ClientConnInterface) PricingServiceClient {
	return &pricingServiceClient{cc}
}

func (c *pricingServiceClient) Patch(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*PricingResponse, error) {
	out := new(PricingResponse)
	err := c.cc.Invoke(ctx, "/byhiras.pricing.PricingService/Patch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PricingServiceServer is the server API for PricingService service.
// All implementations should embed UnimplementedPricingServiceServer
// for forward compatibility
type PricingServiceServer interface {
	Patch(context.Context, *PricingRequest) (*PricingResponse, error)
}

// UnimplementedPricingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPricingServiceServer struct {
}

func (UnimplementedPricingServiceServer) Patch(context.Context, *PricingRequest) (*PricingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Patch not implemented")
}

// UnsafePricingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PricingServiceServer will
// result in compilation errors.
type UnsafePricingServiceServer interface {
	mustEmbedUnimplementedPricingServiceServer()
}

func RegisterPricingServiceServer(s grpc.ServiceRegistrar, srv PricingServiceServer) {
	s.RegisterService(&PricingService_ServiceDesc, srv)
}

func _PricingService_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PricingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/byhiras.pricing.PricingService/Patch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).Patch(ctx, req.(*PricingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PricingService_ServiceDesc is the grpc.ServiceDesc for PricingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PricingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "byhiras.pricing.PricingService",
	HandlerType: (*PricingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Patch",
			Handler:    _PricingService_Patch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pricing_service.proto",
}
